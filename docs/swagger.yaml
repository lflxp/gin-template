definitions:
  model.AuthSwag:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  model.Demo:
    properties:
      company:
        type: string
      count:
        type: string
      country:
        type: string
      extend:
        type: string
      id:
        type: integer
      items:
        type: string
      production:
        type: string
      serial:
        type: string
      uuid:
        type: string
      zoom:
        type: string
    type: object
  model.Menu:
    properties:
      created_on:
        type: integer
      deleted_on:
        type: integer
      id:
        type: integer
      method:
        type: string
      modified_on:
        type: integer
      name:
        type: string
      path:
        type: string
      type:
        type: string
    type: object
  model.Role:
    properties:
      created_on:
        type: integer
      deleted_on:
        type: integer
      id:
        type: integer
      menu:
        items:
          $ref: '#/definitions/model.Menu'
        type: array
      modified_on:
        type: integer
      name:
        type: string
    type: object
  model.User:
    properties:
      created_on:
        type: integer
      deleted_on:
        type: integer
      id:
        type: integer
      modified_on:
        type: integer
      password:
        type: string
      role:
        items:
          $ref: '#/definitions/model.Role'
        type: array
      username:
        type: string
    type: object
info:
  contact:
    name: API Support
    url: http://www.swagger.io/support
  description: Gin API 接口模板服务
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Gin Template
  version: "1.1"
paths:
  /api/v1/demo/add:
    post:
      description: 新增记录，只针对持久化数据
      parameters:
      - description: token
        in: query
        name: token
        type: string
      - description: 数据
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Demo'
      responses:
        "200":
          description: success
          schema:
            type: string
      summary: 新增Demo记录
      tags:
      - Demo
  /api/v1/demo/del/{id}:
    delete:
      description: 删除记录
      parameters:
      - description: token
        in: query
        name: token
        type: string
      - description: 要删除的id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            type: string
      summary: 删除Demo记录
      tags:
      - Demo
  /api/v1/demo/get:
    get:
      description: 获取value，逐级数据查询
      parameters:
      - description: token
        in: query
        name: token
        type: string
      - description: 查询key
        in: query
        name: key
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Demo'
      summary: 查询指定key的值
      tags:
      - Demo
  /api/v1/demo/put/{id}:
    put:
      description: 修改指定id的内容
      parameters:
      - description: token
        in: query
        name: token
        type: string
      - description: 更新的id
        in: path
        name: id
        required: true
        type: string
      - description: 数据
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Demo'
      responses:
        "200":
          description: success
          schema:
            type: string
      summary: 修改Demo记录
      tags:
      - Demo
  /api/v1/roles:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{ "code": 200, "data": {}, "msg": "ok" }'
          schema:
            type: string
      summary: 获取所有角色
      tags:
      - role
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.Role'
      produces:
      - application/json
      responses:
        "200":
          description: '{ "code": 200, "data": {}, "msg": "ok" }'
          schema:
            type: string
      summary: 增加角色
      tags:
      - role
  /api/v1/roles/:id:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{ "code": 200, "data": {}, "msg": "ok" }'
          schema:
            type: string
      summary: 删除角色
      tags:
      - role
    put:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.Role'
      produces:
      - application/json
      responses:
        "200":
          description: '{ "code": 200, "data": {}, "msg": "ok" }'
          schema:
            type: string
      summary: 更新角色
      tags:
      - role
  /api/v1/userInfo:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{ "code": 200, "data": {"lists":""}, "msg": "ok" }'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: 获取登录用户信息
      tags:
      - users
  /api/v1/users:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{ "code": 200, "data": {}, "msg": "ok" }'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: 获取所有用户
      tags:
      - users
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: '{ "code": 200, "data": {}, "msg": "ok" }'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: 增加用户
      tags:
      - users
  /api/v1/users/:id:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{ "code": 200, "data": {}, "msg": "ok" }'
          schema:
            type: string
      summary: 删除用户
      tags:
      - users
    put:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: '{ "code": 200, "data": {}, "msg": "ok" }'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: 更新用户
      tags:
      - users
  /auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.AuthSwag'
      produces:
      - application/json
      responses:
        "200":
          description: '{ "code": 200, "data": {}, "msg": "ok" }'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: 获取登录token 信息
      tags:
      - auth
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
